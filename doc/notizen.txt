ROI or Crop polling mode?
At the moment using Crop mode

Split trainig set into first 50% train and last 25% val

Use VGG16 as it doen't overfit so easy
Try also Res101

L2 regularisation in train_val.py 129+131

train MOTdet with pretrained from VOC -> not much difference

Bounding boxes that go outside of picture are ignored at the moment -> use them and crop them, performance much better

Testing time use NMS or TOP? (See paper of Xinli, states top better) -> TEST.MODE = top does not work at the momoent (Bug in proposal_top_layer.py)


MOT17Det:

0) Original FRCNN
1) VGG16, 110k steps, score >0.05, C&R layer, throw out all BB that are outside of the image
2) VGG16, 110k steps, score >0.05, C&R layer, crop all BB that are outside of image

#	AP	MODA	MODP	FAF	TP	FP	FN	PREC	REC
0)	0.72	68.5	78.0	1.7	88,601	10,081	25,963	89.3	77.3
----------------------------------------------------------------------------
1)	0.69	59.8	78.6	2.4	82,778	14,270	31,786	85.3	72.3
2)	0.70	60.3	77.6	3.6	90,529	21,404	24,035	80.9	79.0



MOT17Det (first half for training, whole training set for evaluation, evaluated locally):

v1) VGG16, 110k steps, score >0.05, C&R layer, throw out all BB that are outside of the image
v2) VGG16, 110k steps, score >0.05, C&R layer, crop all BB that are outside of image
v3) VGG16, 110k steps, score >0.05, ROI Pooling, crop all BB that are outside of image
v4) VGG16, 110k steps, score >0.05, C&R layer, include all BB
v4.1) Do not crop BB on testing time to image boundaries
v5) VGG16, 180k steps, score >0.05, C&R layer, include all BB
v5.1) Do not crop BB on testing time to image boundaries

r1) res101, 110k steps, score >0.05, C&R layer, crop all BB that are outside of image
r2) res101, 110k steps, score >0.05, ROI Pooling, crop all BB that are outside of image
r3) res101, 110k steps, score >0.05, C&R layer, include all BB
r4) res101, 180k steps, score >0.05, C&R layer, include all BB


#	AP	REC	PREC	FAF	GT	TP	FP	FN	MODA	MODP

v1)	0.7263	77.03	92.29	0.80	66393	51143	4275	15250	70.59	84.18
v2)	0.7922	84.23	84.95	1.86	66393	55920	9902	10473	69.31	85.35	
v3)	0.6952	79.62	74.56	3.39	66393	52862	18035	13531	52.46	78.23
v4)	0.8156	83.84	90.94	1.04	66393	55662	5547	10731	75.48	85.87
v4.1)	0.8160	85.06	92.74	0.83	66393	56475	4423	9918	78.40	87.25

v5)	0.8164	84.37	92.81	0.82	66393	56016	4341	10377	77.83	86.21
v5.1)	0.8168	85.13	94.52	0.62	66393	56520	3277	9873	80.19	87.80


r1)	0.7862	84.13	85.71	1.75	66393	55857	9314	10536	70.10	85.72
r2)	0.7598	80.38	72.89	3.73	66393	53365	19852	13028	50.48	78.01
r3)
r4)

Anmerkungen:
- Bei ROI Pooling bleibt der Fehler beim Training auf einem höheren Wert (etwa x2 am Ende, ähnlich res101 ung vgg16)
- Fehler bei res101 etwas geringer als bei vgg16


Only last 1/4 of every sequence so naturally FN going to be high

#       AP      REC     PREC    FAF     GT      TP      FP      FN      MODA    MODP

v1)	0.1816	16.97	86.82	0.32	66393	11266	1710	55127	14.39	78.86
v2)	0.1790	18.41	77.80	0.66	66393	12222	3487	54171	13.16	77.60
v3)	0.1767	17.43	66.88	1.08	66393	11574	5732	54819	8.80	74.12
v4)	0.1816	18.23	84.03	0.43	66393	12105	2301	54288	14.77	78.28
v4.1)	0.1816	18.72	87.28	0.34	66393	12431	1812	53962	15.99	79.37

v5)	0.1817	18.41	84.96	0.41	66393	12221	2164	54172	15.15	78.33
v5.1)	0.1817	18.70	89.07	0.29	66393	12415	1523	53978	16.41	79.67

r1)	0.1773	18.40	76.30	0.71	66393	12218	3796	54175	12.69	78.04
r2)	0.1759	17.83	64.94	1.20	66393	11838	6391	54555	8.20	74.50

